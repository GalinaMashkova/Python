# Урок 7. Функции высшего порядка

# # Задача №49. Решение в группах
# # Планеты вращаются вокруг звезд по эллиптическим орбитам. 
# # Назовем самой далекой планетой ту, орбита которой имеет 
# # самую большую площадь. Напишите функцию 
# # find_farthest_orbit(list_of_orbits), которая среди списка орбит 
# # планет найдет ту, по которой вращается самая далекая 
# # планета. Круговые орбиты не учитывайте: вы знаете, что у 
# # вашей звезды таких планет нет, зато искусственные спутники 
# # были были запущены на круговые орбиты. Результатом 
# # функции должен быть кортеж, содержащий длины полуосей 
# # эллипса орбиты самой далекой планеты. Каждая орбита 
# # представляет из себя кортеж из пары чисел - полуосей ее 
# # эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b, 
# # где a и b - длины полуосей эллипса. При решении задачи 
# # используйте списочные выражения. Подсказка: проще всего 
# # будет найти эллипс в два шага: сначала вычислить самую 
# # большую площадь эллипса, а затем найти и сам эллипс, 
# # имеющий такую площадь. Гарантируется, что самая далекая 
# # планета ровно одна
# # Ввод:
# # orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# # print(*find_farthest_orbit(orbits))
# # Вывод:
# # 2.5 10
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# list1 = [i for i in orbits if i[0] != i[1]]
# list2 = (list(map(lambda x: 3.14 * x[0] * x[1], list1)))
# print(list1[list2.index(max(list2))])

# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# list2 = (list(map(lambda x: 3.14 * x[0] * x[1], [i for i in orbits if i[0] != i[1]])))
# print([i for i in orbits if i[0] != i[1]][list2.index(max(list2))])

# # Напишите функцию same_by(characteristic, objects), которая 
# # проверяет, все ли объекты имеют одинаковое значение 
# # некоторой характеристики, и возвращают True, если это так. 
# # Если значение характеристики для разных объектов 
# # отличается - то False. Для пустого набора объектов, функция 
# # должна возвращать True. Аргумент characteristic - это 
# # функция, которая принимает объект и вычисляет его 
# # характеристику.
# # Ввод: Вывод:
# # values = [0, 2, 10, 6] same
# # if same_by(lambda x: x % 2, values):
# # print(‘same’)
# # else:
# # print(‘different’)
# def filt(funk, arr):
#     res = list(map(funk,arr))
#     for i in range(len(res)-1):
#         if res[i] != res[i+1]:
#             return False
#     return True
# values = [0, 2, 10, 6, 14]
# list1 = filt(lambda x: x % 2, values)
# print(list1)